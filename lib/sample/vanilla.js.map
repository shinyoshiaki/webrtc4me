{"version":3,"file":"vanilla.js","sourceRoot":"","sources":["../../src/sample/vanilla.ts"],"names":[],"mappings":";AAAA,iBA6BA;;;AA7BA,2DAA8B;AAC9B,IAAM,SAAS,GAAG,IAAI,eAAM,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;AACtE,IAAM,UAAU,GAAG,IAAI,eAAM,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;AAExE,CAAC;;;;;gBACC,SAAS,CAAC,SAAS,EAAE,CAAC;gBACR,qBAAM,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAA;;gBAA/D,KAAK,GAAG,SAAuD;gBACrE,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACV,qBAAM,UAAU,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAA;;gBAAjE,MAAM,GAAG,SAAwD;gBACvE,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAEzB,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;oBACvB,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;oBAC7B,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,GAAG;wBAC5B,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;oBACnC,CAAC,CAAC,CAAC;oBACH,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;oBAChC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;gBAClC,CAAC,CAAC,CAAC;gBAEH,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;oBACxB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;oBAC9B,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,GAAG;wBAC7B,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;oBACpC,CAAC,CAAC,CAAC;oBACH,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;oBAClC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;gBACpC,CAAC,CAAC,CAAC;;;;KACJ,CAAC,EAAE,CAAC","sourcesContent":["import WebRTC from \"../index\";\nconst peerOffer = new WebRTC({ disable_stun: true, nodeId: \"offer\" });\nconst peerAnswer = new WebRTC({ disable_stun: true, nodeId: \"answer\" });\n\n(async () => {\n  peerOffer.makeOffer();\n  const offer = await peerOffer.onSignal.asPromise().catch(console.log);\n  peerAnswer.setSdp(offer);\n  const answer = await peerAnswer.onSignal.asPromise().catch(console.log);\n  peerOffer.setSdp(answer);\n\n  peerOffer.onConnect.once(() => {\n    console.log(\"offer connect\");\n    peerOffer.onData.subscribe(raw => {\n      console.log(\"ondata offer\", raw);\n    });\n    peerOffer.send(\"one\", \"offer1\");\n    peerOffer.send(\"two\", \"offer2\");\n  });\n\n  peerAnswer.onConnect.once(() => {\n    console.log(\"answer connect\");\n    peerAnswer.onData.subscribe(raw => {\n      console.log(\"ondata answer\", raw);\n    });\n    peerAnswer.send(\"one\", \"answer1\");\n    peerAnswer.send(\"two\", \"answer2\");\n  });\n})();\n"]}
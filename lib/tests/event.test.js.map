{"version":3,"file":"event.test.js","sourceRoot":"","sources":["../../src/tests/event.test.ts"],"names":[],"mappings":";AAAA,iBAmCA;;;AAnCA,4DAA4B;AAE5B,QAAQ,CAAC,OAAO,EAAE;IAChB,IAAI,CAAC,WAAW,EAAE;QAChB,IAAM,SAAS,GAAG,IAAI,iBAAK,EAAmB,CAAC;QACvC,IAAA;;sBAAW,CAEhB;QAEH,SAAS,CAAC,SAAS,CAAC,UAAA,IAAI;YACtB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;QAEhC,MAAM,CAAE,SAAiB,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtD,WAAW,EAAE,CAAC;QACd,MAAM,CAAE,SAAiB,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEtD,SAAS,CAAC,IAAI,CAAC;YACb,MAAM,CAAE,SAAiB,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QACH,MAAM,CAAE,SAAiB,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtD,SAAS,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,WAAW,EAAE;;;;;oBACV,SAAS,GAAG,IAAI,iBAAK,EAAU,CAAC;oBACtC,UAAU,CAAC;wBACT,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBACvB,CAAC,EAAE,CAAC,CAAC,CAAC;oBACM,qBAAM,SAAS,CAAC,SAAS,EAAE,EAAA;;oBAAjC,GAAG,GAAG,SAA2B;oBACvC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;;SACrB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import Event from \"rx.mini\";\n\ndescribe(\"event\", () => {\n  test(\"subscribe\", () => {\n    const testEvent = new Event<{ msg: string }>();\n    const { unSubscribe } = testEvent.subscribe(data => {\n      expect(data.msg).toBe(\"1\");\n    });\n\n    testEvent.subscribe(data => {\n      expect(data.msg).toBe(\"1\");\n    });\n\n    testEvent.execute({ msg: \"1\" });\n\n    expect((testEvent as any).event.stack.length).toBe(2);\n    unSubscribe();\n    expect((testEvent as any).event.stack.length).toBe(1);\n\n    testEvent.once(() => {\n      expect((testEvent as any).event.stack.length).toBe(1);\n    });\n    expect((testEvent as any).event.stack.length).toBe(2);\n    testEvent.execute({ msg: \"1\" });\n  });\n\n  test(\"aspromise\", async () => {\n    const testEvent = new Event<number>();\n    setTimeout(() => {\n      testEvent.execute(1);\n    }, 0);\n    const res = await testEvent.asPromise();\n    expect(res).toBe(1);\n  });\n});\n"]}
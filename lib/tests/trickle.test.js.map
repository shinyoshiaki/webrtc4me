{"version":3,"file":"trickle.test.js","sourceRoot":"","sources":["../../src/tests/trickle.test.ts"],"names":[],"mappings":";AAAA,iBAuCA;;;AAvCA,2DAA8B;AAC9B,IAAM,SAAS,GAAG,IAAI,eAAM,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;AACjE,IAAM,UAAU,GAAG,IAAI,eAAM,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;AAEnE,IAAI,CAAC,SAAS,EAAE;;;;;gBACR,IAAI,GAAG;oBACX,OAAA,IAAI,OAAO,CAAC,UAAA,OAAO;wBACjB,IAAI,KAAK,GAAG,CAAC,CAAC;wBACd,IAAM,GAAG,GAAG;4BACV,KAAK,EAAE,CAAC;4BACR,IAAI,KAAK,KAAK,CAAC;gCAAE,OAAO,EAAE,CAAC;wBAC7B,CAAC,CAAC;wBAEF,SAAS,CAAC,SAAS,EAAE,CAAC;wBACtB,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAC,GAAQ;4BAC/B,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;wBACzB,CAAC,CAAC,CAAC;wBACH,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAC,GAAQ;4BAChC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;wBACxB,CAAC,CAAC,CAAC;wBAEH,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;4BACvB,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,GAAG;gCAC5B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCAChC,GAAG,EAAE,CAAC;4BACR,CAAC,CAAC,CAAC;4BACH,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBAC1B,CAAC,CAAC,CAAC;wBAEH,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;4BACxB,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,GAAG;gCAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gCAC/B,GAAG,EAAE,CAAC;4BACR,CAAC,CAAC,CAAC;4BACH,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBAC5B,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC;gBA9BF,CA8BE,CAAC;gBACL,qBAAM,IAAI,EAAE,EAAA;;gBAAZ,SAAY,CAAC;;;;KACd,CAAC,CAAC","sourcesContent":["import WebRTC from \"../index\";\nconst peerOffer = new WebRTC({ nodeId: \"offer\", trickle: true });\nconst peerAnswer = new WebRTC({ nodeId: \"answer\", trickle: true });\n\ntest(\"trickle\", async () => {\n  const test = () =>\n    new Promise(resolve => {\n      let count = 0;\n      const end = () => {\n        count++;\n        if (count === 2) resolve();\n      };\n\n      peerOffer.makeOffer();\n      peerOffer.onSignal.once((sdp: any) => {\n        peerAnswer.setSdp(sdp);\n      });\n      peerAnswer.onSignal.once((sdp: any) => {\n        peerOffer.setSdp(sdp);\n      });\n\n      peerOffer.onConnect.once(() => {\n        peerOffer.onData.subscribe(raw => {\n          expect(raw.data).toBe(\"answer\");\n          end();\n        });\n        peerOffer.send(\"offer\");\n      });\n\n      peerAnswer.onConnect.once(() => {\n        peerAnswer.onData.subscribe(raw => {\n          expect(raw.data).toBe(\"offer\");\n          end();\n        });\n        peerAnswer.send(\"answer\");\n      });\n    });\n  await test();\n});\n"]}
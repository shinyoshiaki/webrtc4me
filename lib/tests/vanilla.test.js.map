{"version":3,"file":"vanilla.test.js","sourceRoot":"","sources":["../../src/tests/vanilla.test.ts"],"names":[],"mappings":";AAAA,iBA8CA;;;AA9CA,iDAA6B;AAE7B,iDAAwB;AAExB,IAAI,CAAC,SAAS,EAAE;;;;;gBACR,SAAS,GAAG,IAAI,WAAM,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;gBACtE,UAAU,GAAG,IAAI,WAAM,CAAC;oBAC5B,YAAY,EAAE,IAAI;oBAClB,MAAM,EAAE,QAAQ;oBAChB,IAAI,MAAA;iBACL,CAAC,CAAC;gBAEH,SAAS,CAAC,SAAS,EAAE,CAAC;gBACR,qBAAM,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAA;;gBAA5C,KAAK,GAAG,SAAoC;gBAClD,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACV,qBAAM,UAAU,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAA;;gBAA9C,MAAM,GAAG,SAAqC;gBACpD,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAEzB,qBAAM,OAAO,CAAC,GAAG,CAAC;wBAChB,SAAS,CAAC,SAAS,CAAC,SAAS,EAAE;wBAC/B,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE;qBACjC,CAAC,EAAA;;gBAHF,SAGE,CAAC;gBAEH,UAAU,CAAC;oBACT,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACxB,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC5B,CAAC,CAAC,CAAC;gBAEH,qBAAM,OAAO,CAAC,GAAG,CAAC;wBAChB,IAAI,OAAO,CAAC,UAAA,CAAC;4BACX,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,GAAG;gCAC5B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCAChC,CAAC,EAAE,CAAC;4BACN,CAAC,CAAC,CAAC;wBACL,CAAC,CAAC;wBACF,IAAI,OAAO,CAAC,UAAA,CAAC;4BACX,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,GAAG;gCAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gCAC/B,CAAC,EAAE,CAAC;4BACN,CAAC,CAAC,CAAC;wBACL,CAAC,CAAC;qBACH,CAAC,EAAA;;gBAbF,SAaE,CAAC;gBAEH,UAAU,CAAC,MAAM,EAAE,CAAC;gBACpB,SAAS,CAAC,MAAM,EAAE,CAAC;;;;KACpB,EAAE,KAAM,CAAC,CAAC","sourcesContent":["import * as wrtc from \"wrtc\";\n\nimport WebRTC from \"..\";\n\ntest(\"vanilla\", async () => {\n  const peerOffer = new WebRTC({ disable_stun: true, nodeId: \"offer\", wrtc });\n  const peerAnswer = new WebRTC({\n    disable_stun: true,\n    nodeId: \"answer\",\n    wrtc\n  });\n\n  peerOffer.makeOffer();\n  const offer = await peerOffer.onSignal.asPromise();\n  peerAnswer.setSdp(offer);\n  const answer = await peerAnswer.onSignal.asPromise();\n  peerOffer.setSdp(answer);\n\n  await Promise.all([\n    peerOffer.onConnect.asPromise(),\n    peerAnswer.onConnect.asPromise()\n  ]);\n\n  setTimeout(() => {\n    peerOffer.send(\"offer\");\n    peerAnswer.send(\"answer\");\n  });\n\n  await Promise.all([\n    new Promise(r => {\n      peerOffer.onData.subscribe(raw => {\n        expect(raw.data).toBe(\"answer\");\n        r();\n      });\n    }),\n    new Promise(r => {\n      peerAnswer.onData.subscribe(raw => {\n        expect(raw.data).toBe(\"offer\");\n        r();\n      });\n    })\n  ]);\n\n  peerAnswer.hangUp();\n  peerOffer.hangUp();\n}, 60_000);\n"]}
{"version":3,"file":"vanilla.test.js","sourceRoot":"","sources":["../../src/tests/vanilla.test.ts"],"names":[],"mappings":";AAAA,iBAyCA;;;AAzCA,iDAA6B;AAC7B,2DAA8B;AAC9B,gDAA2C;AAC3C,IAAM,SAAS,GAAG,IAAI,eAAM,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;AAC5E,IAAM,UAAU,GAAG,IAAI,eAAM,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;AAE9E,IAAI,CACF,SAAS,EACT;;;;;;gBACQ,IAAI,GAAG;oBACX,OAAA,IAAI,OAAO,CAAC,UAAM,OAAO;;;;;oCACjB,KAAK,GAAG,iBAAK,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;oCAEhC,SAAS,CAAC,SAAS,EAAE,CAAC;oCACR,qBAAM,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAA;;oCAA5C,KAAK,GAAG,SAAoC;oCAClD,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oCACV,qBAAM,UAAU,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAA;;oCAA9C,MAAM,GAAG,SAAqC;oCACpD,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;oCAEzB,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;wCACvB,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,GAAG;4CAC5B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4CAChC,KAAK,EAAE,CAAC;wCACV,CAAC,CAAC,CAAC;wCACH,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oCAC1B,CAAC,CAAC,CAAC;oCAEH,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;wCACxB,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,GAAG;4CAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;4CAC/B,KAAK,EAAE,CAAC;wCACV,CAAC,CAAC,CAAC;wCACH,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oCAC5B,CAAC,CAAC,CAAC;;;;yBACJ,CAAC;gBAxBF,CAwBE,CAAC;gBACL,qBAAM,IAAI,EAAE,EAAA;;gBAAZ,SAAY,CAAC;gBACb,UAAU,CAAC,MAAM,EAAE,CAAC;gBACpB,SAAS,CAAC,MAAM,EAAE,CAAC;;;;KACpB,EACD,EAAE,GAAG,IAAI,CACV,CAAC","sourcesContent":["import * as wrtc from \"wrtc\";\nimport WebRTC from \"../index\";\nimport { Count } from \"../utill/testtools\";\nconst peerOffer = new WebRTC({ disable_stun: true, nodeId: \"offer\", wrtc });\nconst peerAnswer = new WebRTC({ disable_stun: true, nodeId: \"answer\", wrtc });\n\ntest(\n  \"vanilla\",\n  async () => {\n    const test = () =>\n      new Promise(async resolve => {\n        const count = Count(2, resolve);\n\n        peerOffer.makeOffer();\n        const offer = await peerOffer.onSignal.asPromise();\n        peerAnswer.setSdp(offer);\n        const answer = await peerAnswer.onSignal.asPromise();\n        peerOffer.setSdp(answer);\n\n        peerOffer.onConnect.once(() => {\n          peerOffer.onData.subscribe(raw => {\n            expect(raw.data).toBe(\"answer\");\n            count();\n          });\n          peerOffer.send(\"offer\");\n        });\n\n        peerAnswer.onConnect.once(() => {\n          peerAnswer.onData.subscribe(raw => {\n            expect(raw.data).toBe(\"offer\");\n            count();\n          });\n          peerAnswer.send(\"answer\");\n        });\n      });\n    await test();\n    peerAnswer.hangUp();\n    peerOffer.hangUp();\n  },\n  60 * 1000\n);\n"]}
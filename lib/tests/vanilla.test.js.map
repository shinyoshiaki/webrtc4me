{"version":3,"file":"vanilla.test.js","sourceRoot":"","sources":["../../src/tests/vanilla.test.ts"],"names":[],"mappings":";AAAA,iBAoCA;;;AApCA,2DAA8B;AAC9B,IAAM,SAAS,GAAG,IAAI,eAAM,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;AACtE,IAAM,UAAU,GAAG,IAAI,eAAM,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;AAExE,IAAI,CAAC,SAAS,EAAE;;;;;;gBACR,IAAI,GAAG;oBACX,OAAA,IAAI,OAAO,CAAC,UAAM,OAAO;;;;;oCACnB,KAAK,GAAG,CAAC,CAAC;oCACR,GAAG,GAAG;wCACV,KAAK,EAAE,CAAC;wCACR,IAAI,KAAK,KAAK,CAAC;4CAAE,OAAO,EAAE,CAAC;oCAC7B,CAAC,CAAC;oCACF,SAAS,CAAC,SAAS,EAAE,CAAC;oCACR,qBAAM,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAA;;oCAA5C,KAAK,GAAG,SAAoC;oCAClD,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oCACV,qBAAM,UAAU,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAA;;oCAA9C,MAAM,GAAG,SAAqC;oCACpD,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;oCAEzB,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;wCACvB,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,GAAG;4CAC5B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4CAChC,GAAG,EAAE,CAAC;wCACR,CAAC,CAAC,CAAC;wCACH,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oCAC1B,CAAC,CAAC,CAAC;oCAEH,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;wCACxB,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,GAAG;4CAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;4CAC/B,GAAG,EAAE,CAAC;wCACR,CAAC,CAAC,CAAC;wCACH,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oCAC5B,CAAC,CAAC,CAAC;;;;yBACJ,CAAC;gBA3BF,CA2BE,CAAC;gBACL,qBAAM,IAAI,EAAE,EAAA;;gBAAZ,SAAY,CAAC;;;;KACd,CAAC,CAAC","sourcesContent":["import WebRTC from \"../index\";\nconst peerOffer = new WebRTC({ disable_stun: true, nodeId: \"offer\" });\nconst peerAnswer = new WebRTC({ disable_stun: true, nodeId: \"answer\" });\n\ntest(\"vanilla\", async () => {\n  const test = () =>\n    new Promise(async resolve => {\n      let count = 0;\n      const end = () => {\n        count++;\n        if (count === 2) resolve();\n      };\n      peerOffer.makeOffer();\n      const offer = await peerOffer.onSignal.asPromise();\n      peerAnswer.setSdp(offer);\n      const answer = await peerAnswer.onSignal.asPromise();\n      peerOffer.setSdp(answer);\n\n      peerOffer.onConnect.once(() => {\n        peerOffer.onData.subscribe(raw => {\n          expect(raw.data).toBe(\"answer\");\n          end();\n        });\n        peerOffer.send(\"offer\");\n      });\n\n      peerAnswer.onConnect.once(() => {\n        peerAnswer.onData.subscribe(raw => {\n          expect(raw.data).toBe(\"offer\");\n          end();\n        });\n        peerAnswer.send(\"answer\");\n      });\n    });\n  await test();\n});\n"]}
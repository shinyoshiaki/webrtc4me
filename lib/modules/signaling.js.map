{"version":3,"file":"signaling.js","sourceRoot":"","sources":["../../src/modules/signaling.ts"],"names":[],"mappings":";;;AAAA,yDAA6B;AAC7B,4DAA4B;AAG5B;IAAuC,qCAAM;IAA7C;;IAsBA,CAAC;IArBC,yBAAK,GAAL;QACE,IAAM,KAAK,GAAG,IAAI,iBAAK,EAAU,CAAC;QAE1B,IAAA,gEAAW,CAA4C;QAC/D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEjC,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,OAAO,KAAK,CAAC,cAAc,CAAC;IAC9B,CAAC;IAED,0BAAM,GAAN,UAAO,MAAc;QACnB,IAAM,KAAK,GAAG,IAAI,iBAAK,EAAU,CAAC;QAE1B,IAAA,gEAAW,CAA4C;QAC/D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEjC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAEpB,OAAO,KAAK,CAAC,cAAc,CAAC;IAC9B,CAAC;IACH,gBAAC;AAAD,CAAC,AAtBD,CAAuC,cAAM,GAsB5C","sourcesContent":["import WebRTC from \"../core\";\nimport Event from \"rx.mini\";\nimport { Signal } from \"..\";\n\nexport default class Signaling extends WebRTC {\n  offer() {\n    const event = new Event<Signal>();\n\n    const { unSubscribe } = this.onSignal.subscribe(event.execute);\n    this.onConnect.once(unSubscribe);\n\n    this.makeOffer();\n\n    return event.returnListener;\n  }\n\n  answer(signal: Signal) {\n    const event = new Event<Signal>();\n\n    const { unSubscribe } = this.onSignal.subscribe(event.execute);\n    this.onConnect.once(unSubscribe);\n\n    this.setSdp(signal);\n\n    return event.returnListener;\n  }\n}\n"]}
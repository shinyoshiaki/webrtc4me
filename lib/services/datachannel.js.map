{"version":3,"file":"datachannel.js","sourceRoot":"","sources":["../../src/services/datachannel.ts"],"names":[],"mappings":";;;AAAA,yDAAsC;AAEtC;IAWE,4BAAoB,EAAqB;QAAzC,iBAQC;QARmB,OAAE,GAAF,EAAE,CAAmB;QAVjC,SAAI,GAAG,cAAI,EAAE,CAAC;QACd,UAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QAEhC,cAAS,GAAG,IAAI,CAAC,KAAK,EAA0C,CAAC;QACjE,aAAQ,GAAG,IAAI,CAAC,KAAK,EAAkB,CAAC;QAExC,iBAAY,GAAwC,EAAE,CAAC;QAE/C,oBAAe,GAA+C,EAAE,CAAC;QAYjE,kBAAa,GAAG,UAAC,OAAuB;YAC9C,OAAO,CAAC,SAAS,GAAG,UAAC,EAAQ;oBAAN,cAAI;gBACzB,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,IAAI,MAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;YAC5C,CAAC,CAAC;YACF,OAAO,CAAC,OAAO,GAAG,UAAA,GAAG,IAAI,OAAA,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAjB,CAAiB,CAAC;YAC3C,OAAO,CAAC,OAAO,GAAG,cAAM,OAAA,OAAO,KAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,EAAvC,CAAuC,CAAC;QAClE,CAAC,CAAC;QAfA,EAAE,CAAC,aAAa,GAAG,UAAO,EAAW;gBAAT,oBAAO;;;;gCACjC,qBAAM,IAAI,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,OAAO,CAAC,MAAM,GAAG,cAAM,OAAA,CAAC,EAAE,EAAH,CAAG,CAAC,EAA5B,CAA4B,CAAC,EAAA;;4BAApD,SAAoD,CAAC;4BAErD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;4BAC5B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;4BAC3C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;;;;;SAChC,CAAC;IACJ,CAAC;IAUK,mCAAM,GAAZ,UAAa,KAAa;;;;;;wBACxB,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;4BAC5B,sBAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAC;yBACjC;6BAEG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAA3B,wBAA2B;wBACb,qBAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE,EAAA;;wBAAvD,YAAU,SAA6C;wBAC7D,sBAAO,SAAO,EAAC;;wBAGX,KAAK,GAAG,IAAI,iBAAK,EAAkB,CAAC;wBAC1C,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;wBAE9B,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;6BAE7C,CAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,KAAK,CAAC,CAAA,EAA3C,wBAA2C;wBAC7C,qBAAM,IAAI,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,OAAO,CAAC,MAAM,GAAG,cAAM,OAAA,CAAC,EAAE,EAAH,CAAG,CAAC,EAA5B,CAA4B,CAAC,EAAA;;wBAApD,SAAoD,CAAC;;4BAErD,qBAAM,IAAI,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,UAAU,CAAC,CAAC,CAAC,EAAb,CAAa,CAAC,EAAA;;wBAArC,SAAqC,CAAC;;;wBAGxC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;wBACnC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;wBAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;wBAE/B,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;wBACvB,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;wBAEnC,sBAAO,OAAO,EAAC;;;;KAChB;IAED,iCAAI,GAAJ,UAAK,IAAS,EAAE,KAAa;QAC3B,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;QAC7D,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,oCAAO,GAAP;QACE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAA,OAAO;YAC9C,OAAO,CAAC,SAAS,GAAG,IAAW,CAAC;YAChC,OAAO,CAAC,MAAM,GAAG,IAAW,CAAC;YAC7B,OAAO,CAAC,OAAO,GAAG,IAAW,CAAC;YAC9B,OAAO,CAAC,OAAO,GAAG,IAAW,CAAC;YAC9B,OAAO,CAAC,KAAK,EAAE,CAAC;QAClB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;IACxB,CAAC;IACH,yBAAC;AAAD,CAAC,AA3ED,IA2EC;AA3EY,gDAAkB","sourcesContent":["import Event, { Pack } from \"rx.mini\";\n\nexport class DataChannelService {\n  private pack = Pack();\n  private event = this.pack.event;\n\n  onMessage = this.event<{ channel: RTCDataChannel; data: any }>();\n  onOpenDC = this.event<RTCDataChannel>();\n\n  dataChannels: { [label: string]: RTCDataChannel } = {};\n\n  private creatingChannel: { [label: string]: Event<RTCDataChannel> } = {};\n\n  constructor(private pc: RTCPeerConnection) {\n    pc.ondatachannel = async ({ channel }) => {\n      await new Promise(r => (channel.onopen = () => r()));\n\n      this.channelEvents(channel);\n      this.dataChannels[channel.label] = channel;\n      this.onOpenDC.execute(channel);\n    };\n  }\n\n  private channelEvents = (channel: RTCDataChannel) => {\n    channel.onmessage = ({ data }) => {\n      this.onMessage.execute({ data, channel });\n    };\n    channel.onerror = err => console.warn(err);\n    channel.onclose = () => delete this.dataChannels[channel.label];\n  };\n\n  async create(label: string) {\n    if (this.dataChannels[label]) {\n      return this.dataChannels[label];\n    }\n\n    if (this.creatingChannel[label]) {\n      const channel = await this.creatingChannel[label].asPromise();\n      return channel;\n    }\n\n    const event = new Event<RTCDataChannel>();\n    this.creatingChannel[label] = event;\n\n    const channel = this.pc.createDataChannel(label);\n\n    if (Object.keys(this.dataChannels).length === 0)\n      await new Promise(r => (channel.onopen = () => r()));\n    else {\n      await new Promise(r => setTimeout(r));\n    }\n\n    this.dataChannels[label] = channel;\n    this.channelEvents(channel);\n    this.onOpenDC.execute(channel);\n\n    event.execute(channel);\n    delete this.creatingChannel[label];\n\n    return channel;\n  }\n\n  send(data: any, label: string) {\n    if (!this.dataChannels[label]) throw new Error(\"no channel\");\n    this.dataChannels[label].send(data);\n  }\n\n  dispose() {\n    Object.values(this.dataChannels).forEach(channel => {\n      channel.onmessage = null as any;\n      channel.onopen = null as any;\n      channel.onclose = null as any;\n      channel.onerror = null as any;\n      channel.close();\n    });\n    this.pack.finishAll();\n  }\n}\n"]}
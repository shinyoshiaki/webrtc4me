{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/extensions/job/index.ts"],"names":[],"mappings":";;;AAAA,qDAA2B;AAS3B;IAGE,gBAAoB,IAAW;QAAX,SAAI,GAAJ,IAAI,CAAO;QAF/B,YAAO,GAAG,KAAK,CAAC;IAEkB,CAAC;IAErB,wBAAO,GAArB;;;;;;wBACQ,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;6BAC1B,GAAG,EAAH,wBAAG;wBACL,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;wBAEZ,IAAI,GAAkB,GAAG,KAArB,EAAE,IAAI,GAAY,GAAG,KAAf,EAAE,UAAU,GAAG,MAAR,CAAS;wBAEtB,qBAAM,IAAI,eAAI,IAAI,GAAC;;wBAAzB,GAAG,GAAG,SAAmB;wBAC/B,OAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;wBAEnB,IAAI,CAAC,OAAO,EAAE,CAAC;;;wBAEf,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;;;;;;KAExB;IAED,uBAAM,GAAN;QACE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;IACH,CAAC;IACH,aAAC;AAAD,CAAC,AA1BD,IA0BC;AAED;IAIE,mBAAoB,GAAsB;QAA1C,iBAGC;QAHmB,oBAAA,EAAA,QAAgB,CAAC,EAAE,CAAC,EAAE;QAAtB,QAAG,GAAH,GAAG,CAAmB;QAH1C,SAAI,GAAU,EAAE,CAAC;QACjB,YAAO,GAAa,EAAE,CAAC;QAGb,IAAA,SAAC,CAAS;QAClB,IAAI,CAAC,OAAO,GAAO,KAAK,CAAC,CAAC,CAAC,SAAE,GAAG,CAAC,cAAM,OAAA,IAAI,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,EAArB,CAAqB,CAAC,CAAC;IAChE,CAAC;IAEK,uBAAG,GAAT,UACE,IAAO,EACP,IAAqB;;;;gBAEb,CAAC,GAAK,IAAI,CAAC,GAAG,EAAb,CAAc;gBAEjB,KAAK,GAAG,IAAI,WAAK,EAA0B,CAAC;gBAElD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,IAAI,MAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;gBAEtC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;oBACxB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,EAAE,EAAf,CAAe,CAAC,CAAC;iBACjD;gBAED,sBAAO,KAAK,CAAC,SAAS,EAAE,EAAC;;;KAC1B;IACH,gBAAC;AAAD,CAAC,AAzBD,IAyBC","sourcesContent":["import Event from \"../../\";\n\ntype Option = { a: number };\n\ntype AA<T> = T extends (...arg: infer I) => any ? I : never;\ntype ThenArg<T> = T extends Promise<infer U> ? U : T;\n\ntype Job = { func: any; args: any[]; event: Event<any> };\n\nclass Worker {\n  running = false;\n\n  constructor(private jobs: Job[]) {}\n\n  private async execute() {\n    const job = this.jobs.shift();\n    if (job) {\n      this.running = true;\n\n      const { func, args, event } = job;\n\n      const res = await func(...args);\n      event.execute(res);\n\n      this.execute();\n    } else {\n      this.running = false;\n    }\n  }\n\n  wakeup() {\n    if (!this.running) {\n      this.execute();\n    }\n  }\n}\n\nexport default class JobSystem {\n  jobs: Job[] = [];\n  workers: Worker[] = [];\n\n  constructor(private opt: Option = { a: 5 }) {\n    const { a } = opt;\n    this.workers = [...Array(a)].map(() => new Worker(this.jobs));\n  }\n\n  async add<T extends (...args: any[]) => Promise<any>>(\n    func: T,\n    args: AA<typeof func>\n  ) {\n    const { a } = this.opt;\n\n    const event = new Event<ThenArg<ReturnType<T>>>();\n\n    this.jobs.push({ func, args, event });\n\n    if (this.jobs.length < a) {\n      this.workers.forEach(worker => worker.wakeup());\n    }\n\n    return event.asPromise();\n  }\n}\n"]}
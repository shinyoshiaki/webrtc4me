{"version":3,"sources":["webpack://MessagePack/webpack/universalModuleDefinition","webpack://MessagePack/webpack/bootstrap","webpack://MessagePack/./src/utils/utf8.ts","webpack://MessagePack/./src/ExtData.ts","webpack://MessagePack/./src/utils/int.ts","webpack://MessagePack/./src/timestamp.ts","webpack://MessagePack/./src/ExtensionCodec.ts","webpack://MessagePack/./src/utils/typedArrays.ts","webpack://MessagePack/./src/wasmFunctions.ts","webpack://MessagePack/./src/Encoder.ts","webpack://MessagePack/./src/encode.ts","webpack://MessagePack/./src/utils/prettyByte.ts","webpack://MessagePack/./src/Decoder.ts","webpack://MessagePack/./src/decode.ts","webpack://MessagePack/./src/utils/stream.ts","webpack://MessagePack/./src/decodeAsync.ts","webpack://MessagePack/./src/index.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","TEXT_ENCODING_AVAILABLE","TextEncoder","TextDecoder","utf8Count","str","strLength","length","byteLength","pos","charCodeAt","extra","sharedTextEncoder","undefined","utf8EncodeTE","encodeInto","output","outputOffset","subarray","set","encode","CHUNK_SIZE","sharedTextDecoder","ExtData","type","data","setInt64","view","offset","high","Math","floor","low","setUint32","getInt64","getInt32","getUint32","TIMESTAMP32_MAX_SEC","TIMESTAMP64_MAX_SEC","encodeTimeSpecToTimestamp","_a","sec","nsec","rv","Uint8Array","DataView","buffer","secHigh","secLow","encodeDateToTimeSpec","date","msec","getTime","nsecInSec","encodeTimestampExtension","Date","decodeTimestampToTimeSpec","byteOffset","nsec30AndSecHigh2","Error","decodeTimestampExtension","timeSpec","timestampExtension","decode","ExtensionCodec_ExtensionCodec","ExtensionCodec","builtInEncoders","builtInDecoders","encoders","decoders","register","index","tryToEncode","encoder","decoder","defaultCodec","ensureUint8Array","ArrayBuffer","isView","from","wm","WASM_AVAILABLE","utf8EncodeWasm","inputByteLength","inputU16BePtr","malloc","destPtr","destByteLength","inputView","memory","setUint16","setMemoryStr","outputPtr","outputLength","utf8EncodeUint16Array","free","wasmFunctions_CHUNK_SIZE","utf8DecodeWasm","bytes","inputOffset","src","size","inputPtr","outputArraySize","utf8DecodeToUint16Array","units","String","fromCharCode","apply","result","chunk","safeStringFromCharCodeU16","Uint16Array","DEFAULT_MAX_DEPTH","DEFAULT_INITIAL_BUFFER_SIZE","Encoder_Encoder","Encoder","extensionCodec","maxDepth","initialBufferSize","sortKeys","forceFloat32","depth","encodeNil","encodeBoolean","encodeNumber","encodeString","encodeObject","getUint8Array","ensureBufferSizeToWrite","sizeToWrite","requiredSize","resizeBuffer","newSize","newBuffer","newBytes","newView","writeU8","Number","isSafeInteger","writeU16","writeU32","writeU64","writeI8","writeI16","writeI32","writeI64","writeF32","writeF64","writeStringHeader","maxSize","ouputLength","utf8EncodeJs","ext","encodeExtension","Array","isArray","encodeArray","encodeBinary","toString","encodeMap","writeU8a","object_1","Encoder_values","object_1_1","next","done","item","keys","sort","setUint8","values","setInt8","setInt16","setInt32","setFloat32","setFloat64","setUint64","defaultEncodeOptions","options","prettyByte","byte","abs","padStart","State","HEAD_BYTE_REQUIRED","EMPTY_VIEW","EMPTY_BYTES","DataViewIndexOutOfBoundsError","getInt8","e","constructor","MORE_DATA","DEFAULT_MAX_LENGTH","Decoder_Decoder","Decoder","maxStrLength","maxBinLength","maxArrayLength","maxMapLength","maxExtLength","totalPos","headByte","stack","setBuffer","bufferView","createDataView","appendBuffer","hasRemaining","remainingData","newData","concated","createNoExtraBytesError","posToShow","RangeError","decodeOneSync","decodeSync","decodeOneAsync","stream","decoded","stream_1","__asyncValues","stream_1_1","_b","decodeStream","stream_2","stream_2_1","sent","e_2","decodeArrayStream","headerParsed","itemsLeft","stream_3","stream_3_1","readArraySize","complete","e_4","DECODE","readHeadByte","pushMapState","pushArrayState","decodeUtf8String","readF32","readF64","readU8","readU16","readU32","readU64","readI8","readI16","readI32","readI64","lookU8","lookU16","lookU32","decodeBinary","decodeExtension","state","ARRAY","array","position","pop","MAP_KEY","MAP_VALUE","map","readCount","push","headerOffset","stringBytes","utf8DecodeTD","end","byte1","byte2","byte3","unit","__spread","utf8DecodeJs","headOffset","extType","getUint8","getUint16","getInt16","getFloat32","getFloat64","defaultDecodeOptions","ensureAsyncIterabe","streamLike","asyncIterator","reader","getReader","stream_await","read","releaseLock","asyncIterableFromStream","decodeAsync","__webpack_exports__"],"mappings":"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","file":"msgpack.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MessagePack\"] = factory();\n\telse\n\t\troot[\"MessagePack\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const TEXT_ENCODING_AVAILABLE =\n  process.env.TEXT_ENCODING !== \"never\" && (typeof TextEncoder !== \"undefined\" && typeof TextDecoder !== \"undefined\");\n\nexport function utf8Count(str: string): number {\n  const strLength = str.length;\n\n  let byteLength = 0;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      byteLength++;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      byteLength += 2;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        byteLength += 3;\n      } else {\n        // 4-byte\n        byteLength += 4;\n      }\n    }\n  }\n  return byteLength;\n}\n\nexport function utf8EncodeJs(str: string, output: Uint8Array, outputOffset: number): void {\n  const strLength = str.length;\n  let offset = outputOffset;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      output[offset++] = value;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      } else {\n        // 4-byte\n        output[offset++] = ((value >> 18) & 0x07) | 0xf0;\n        output[offset++] = ((value >> 12) & 0x3f) | 0x80;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      }\n    }\n\n    output[offset++] = (value & 0x3f) | 0x80;\n  }\n}\n\nconst sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;\nexport const TEXT_ENCODER_THRESHOLD = process.env.TEXT_ENCODING !== \"force\" ? 200 : 0;\n\nfunction utf8EncodeTEencode(str: string, output: Uint8Array, outputOffset: number): void {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  output.set(sharedTextEncoder!.encode(str), outputOffset);\n}\n\nfunction utf8EncodeTEencodeInto(str: string, output: Uint8Array, outputOffset: number): void {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  sharedTextEncoder!.encodeInto(str, output.subarray(outputOffset));\n}\n\nexport const utf8EncodeTE =\n  sharedTextEncoder && sharedTextEncoder.encodeInto ? utf8EncodeTEencodeInto : utf8EncodeTEencode;\n\nconst CHUNK_SIZE = 0x10_000;\n\nexport function utf8DecodeJs(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  let offset = inputOffset;\n  const end = offset + byteLength;\n\n  const units: Array<number> = [];\n  let result = \"\";\n  while (offset < end) {\n    const byte1 = bytes[offset++];\n    if ((byte1 & 0x80) === 0) {\n      // 1 byte\n      units.push(byte1);\n    } else if ((byte1 & 0xe0) === 0xc0) {\n      // 2 bytes\n      const byte2 = bytes[offset++] & 0x3f;\n      units.push(((byte1 & 0x1f) << 6) | byte2);\n    } else if ((byte1 & 0xf0) === 0xe0) {\n      // 3 bytes\n      const byte2 = bytes[offset++] & 0x3f;\n      const byte3 = bytes[offset++] & 0x3f;\n      units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n    } else if ((byte1 & 0xf8) === 0xf0) {\n      // 4 bytes\n      const byte2 = bytes[offset++] & 0x3f;\n      const byte3 = bytes[offset++] & 0x3f;\n      const byte4 = bytes[offset++] & 0x3f;\n      let unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n      if (unit > 0xffff) {\n        unit -= 0x10000;\n        units.push(((unit >>> 10) & 0x3ff) | 0xd800);\n        unit = 0xdc00 | (unit & 0x3ff);\n      }\n      units.push(unit);\n    } else {\n      units.push(byte1);\n    }\n\n    if (units.length - 4 >= CHUNK_SIZE) {\n      result += String.fromCharCode(...units);\n      units.length = 0;\n    }\n  }\n\n  if (units.length > 0) {\n    result += String.fromCharCode(...units);\n  }\n\n  return result;\n}\n\nconst sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;\nexport const TEXT_DECODER_THRESHOLD = process.env.TEXT_DECODER !== \"force\" ? 200 : 0;\n\nexport function utf8DecodeTD(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return sharedTextDecoder!.decode(stringBytes);\n}\n","/**\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\n */\nexport class ExtData {\n  constructor(readonly type: number, readonly data: Uint8Array) {}\n}\n","// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\n\nexport function setUint64(view: DataView, offset: number, value: number): void {\n  const high = value / 0x1_0000_0000;\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function setInt64(view: DataView, offset: number, value: number): void {\n  const high = Math.floor(value / 0x1_0000_0000);\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function getInt64(view: DataView, offset: number) {\n  const high = view.getInt32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n\nexport function getUint64(view: DataView, offset: number) {\n  const high = view.getUint32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n","// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { getInt64, setInt64 } from \"./utils/int\";\n\nexport const EXT_TIMESTAMP = -1;\n\nexport type TimeSpec = {\n  sec: number;\n  nsec: number;\n};\n\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\n\nexport function encodeTimeSpecToTimestamp({ sec, nsec }: TimeSpec): Uint8Array {\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n    // Here sec >= 0 && nsec >= 0\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n      // timestamp 32 = { sec32 (unsigned) }\n      const rv = new Uint8Array(4);\n      const view = new DataView(rv.buffer);\n      view.setUint32(0, sec);\n      return rv;\n    } else {\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n      const secHigh = sec / 0x100000000;\n      const secLow = sec & 0xffffffff;\n      const rv = new Uint8Array(8);\n      const view = new DataView(rv.buffer);\n      // nsec30 | secHigh2\n      view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\n      // secLow32\n      view.setUint32(4, secLow);\n      return rv;\n    }\n  } else {\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n    const rv = new Uint8Array(12);\n    const view = new DataView(rv.buffer);\n    view.setUint32(0, nsec);\n    setInt64(view, 4, sec);\n    return rv;\n  }\n}\n\nexport function encodeDateToTimeSpec(date: Date): TimeSpec {\n  const msec = date.getTime();\n  const sec = Math.floor(msec / 1e3);\n  const nsec = (msec - sec * 1e3) * 1e6;\n\n  // Normalizes { sec, nsec } to ensure nsec is unsigned.\n  const nsecInSec = Math.floor(nsec / 1e9);\n  return {\n    sec: sec + nsecInSec,\n    nsec: nsec - nsecInSec * 1e9,\n  };\n}\n\nexport function encodeTimestampExtension(object: unknown): Uint8Array | null {\n  if (object instanceof Date) {\n    const timeSpec = encodeDateToTimeSpec(object);\n    return encodeTimeSpecToTimestamp(timeSpec);\n  } else {\n    return null;\n  }\n}\n\nexport function decodeTimestampToTimeSpec(data: Uint8Array): TimeSpec {\n  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\n  // data may be 32, 64, or 96 bits\n  switch (data.byteLength) {\n    case 4: {\n      // timestamp 32 = { sec32 }\n      const sec = view.getUint32(0);\n      const nsec = 0;\n      return { sec, nsec };\n    }\n    case 8: {\n      // timestamp 64 = { nsec30, sec34 }\n      const nsec30AndSecHigh2 = view.getUint32(0);\n      const secLow32 = view.getUint32(4);\n      const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n      const nsec = nsec30AndSecHigh2 >>> 2;\n      return { sec, nsec };\n    }\n    case 12: {\n      // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n\n      const sec = getInt64(view, 4);\n      const nsec = view.getUint32(0);\n      return { sec, nsec };\n    }\n    default:\n      throw new Error(`Unrecognized data size for timestamp: ${data.length}`);\n  }\n}\n\nexport function decodeTimestampExtension(data: Uint8Array): Date {\n  const timeSpec = decodeTimestampToTimeSpec(data);\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\n\nexport const timestampExtension = {\n  type: EXT_TIMESTAMP,\n  encode: encodeTimestampExtension,\n  decode: decodeTimestampExtension,\n};\n","// ExtensionCodec to handle MessagePack extensions\n\nimport { ExtData } from \"./ExtData\";\nimport { timestampExtension } from \"./timestamp\";\n\nexport type ExtensionDecoderType = (data: Uint8Array, extensionType: number) => unknown;\n\nexport type ExtensionEncoderType = (input: unknown) => Uint8Array | null;\n\n// immutable interfce to ExtensionCodec\nexport type ExtensionCodecType = {\n  tryToEncode(object: unknown): ExtData | null;\n  decode(data: Uint8Array, extType: number): unknown;\n};\n\nexport class ExtensionCodec implements ExtensionCodecType {\n  public static readonly defaultCodec: ExtensionCodecType = new ExtensionCodec();\n\n  // built-in extensions\n  private readonly builtInEncoders: Array<ExtensionEncoderType> = [];\n  private readonly builtInDecoders: Array<ExtensionDecoderType> = [];\n\n  // custom extensions\n  private readonly encoders: Array<ExtensionEncoderType> = [];\n  private readonly decoders: Array<ExtensionDecoderType> = [];\n\n  public constructor() {\n    this.register(timestampExtension);\n  }\n\n  public register({\n    type,\n    encode,\n    decode,\n  }: {\n    type: number;\n    encode: ExtensionEncoderType;\n    decode: ExtensionDecoderType;\n  }): void {\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      const index = 1 + type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  }\n\n  public tryToEncode(object: unknown): ExtData | null {\n    // built-in extensions\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\n      const encoder = this.builtInEncoders[i];\n      if (encoder != null) {\n        const data = encoder(object);\n        if (data != null) {\n          const type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    // custom extensions\n    for (let i = 0; i < this.encoders.length; i++) {\n      const encoder = this.encoders[i];\n      if (encoder != null) {\n        const data = encoder(object);\n        if (data != null) {\n          const type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n    return null;\n  }\n\n  public decode(data: Uint8Array, type: number): unknown {\n    const decoder = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n    if (decoder) {\n      return decoder(data, type);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  }\n}\n","export function ensureUint8Array(buffer: ArrayLike<number> | Uint8Array | ArrayBufferView | ArrayBuffer) {\n  if (buffer instanceof Uint8Array) {\n    return buffer;\n  } else if (ArrayBuffer.isView(buffer)) {\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  } else if (buffer instanceof ArrayBuffer) {\n    return new Uint8Array(buffer);\n  } else {\n    // ArrayLike<number>\n    return Uint8Array.from(buffer);\n  }\n}\n\nexport function createDataView(buffer: ArrayLike<number> | ArrayBufferView | ArrayBuffer): DataView {\n  if (buffer instanceof ArrayBuffer) {\n    return new DataView(buffer);\n  }\n\n  const bufferView = ensureUint8Array(buffer);\n  return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n}\n","// WASM=never - disable WASM functions\n// WASM=force - force to use WASM functions\nconst WASM: string = process.env.MSGPACK_WASM || process.env.WASM || \"\";\nexport const NO_WASM = WASM === \"never\";\nexport const FORCE_WASM = WASM === \"force\";\n\ntype pointer = number;\n\n// WM stands for WasmModule, but not the WebAssembly.Module instance but the WebAssembly.Instance.prototype.exports\nconst wm: any = (() => {\n  if (NO_WASM) {\n    return null;\n  }\n\n  try {\n    return require(\"../dist/wasm/msgpack.wasm.js\");\n  } catch (e) {\n    if (FORCE_WASM) {\n      throw e;\n    }\n    return null;\n  }\n})();\n\nexport const WASM_AVAILABLE = !!wm;\n\n// A hint of when to use WASM ver.\nexport const WASM_STR_THRESHOLD = FORCE_WASM ? 0 : 1024;\n\nfunction setMemoryU8(destPtr: pointer, src: Uint8Array, size: number) {\n  const destView = new Uint8Array(wm.memory.buffer, destPtr, size);\n  destView.set(src);\n}\n\nfunction setMemoryStr(destPtr: pointer, destByteLength: number, str: string, strLength: number) {\n  const inputView = new DataView(wm.memory.buffer, destPtr, destByteLength);\n  for (let i = 0; i < strLength; i++) {\n    inputView.setUint16(i * 2, str.charCodeAt(i));\n  }\n}\n\n/**\n * It encodes string to MessagePack str family (headByte/size + utf8 bytes).\n * @returns The whole byte length including headByte/size.\n */\nexport function utf8EncodeWasm(str: string, output: Uint8Array, outputOffset: number): number {\n  const strLength = str.length;\n  const inputByteLength = strLength * 2;\n  const inputU16BePtr: pointer = wm.malloc(inputByteLength);\n  setMemoryStr(inputU16BePtr, inputByteLength, str, strLength);\n\n  const maxOutputHeaderSize = 1 + 4; // headByte + u32\n  const outputPtr: pointer = wm.malloc(maxOutputHeaderSize + strLength * 4);\n  try {\n    const outputLength = wm.utf8EncodeUint16Array(outputPtr, inputU16BePtr, strLength);\n    output.set(new Uint8Array(wm.memory.buffer, outputPtr, outputLength), outputOffset);\n    return outputLength;\n  } finally {\n    wm.free(inputU16BePtr);\n    wm.free(outputPtr);\n  }\n}\n\nconst CHUNK_SIZE = 0x10_000;\n\nfunction safeStringFromCharCodeU16(units: Uint16Array) {\n  if (units.length <= CHUNK_SIZE) {\n    // `String.fromCharCode.apply()` is faster than `String.fromCharCode(...units)`\n    // in case `units` is a typed array\n    return String.fromCharCode.apply(String, units as any);\n  }\n\n  let result = \"\";\n  for (let i = 0; i < units.length; i++) {\n    const chunk = units.subarray(i * CHUNK_SIZE, (i + 1) * CHUNK_SIZE);\n    result += String.fromCharCode.apply(String, chunk as any);\n  }\n  return result;\n}\n\n// A wrapper function for utf8DecodeToUint16Array()\nexport function utf8DecodeWasm(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  const inputPtr: pointer = wm.malloc(byteLength);\n  // in worst case, the UTF-16 array uses the same as byteLength * 2\n  const outputPtr: pointer = wm.malloc(byteLength * 2);\n  try {\n    setMemoryU8(inputPtr, bytes.subarray(inputOffset, inputOffset + byteLength), byteLength);\n\n    const outputArraySize = wm.utf8DecodeToUint16Array(outputPtr, inputPtr, byteLength);\n    const units = new Uint16Array(wm.memory.buffer, outputPtr, outputArraySize);\n    return safeStringFromCharCodeU16(units);\n  } finally {\n    wm.free(inputPtr);\n    wm.free(outputPtr);\n  }\n}\n","import { utf8EncodeJs, utf8Count, TEXT_ENCODING_AVAILABLE, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8\";\nimport { ExtensionCodec } from \"./ExtensionCodec\";\nimport { setInt64, setUint64 } from \"./utils/int\";\nimport { ensureUint8Array } from \"./utils/typedArrays\";\nimport { ExtData } from \"./ExtData\";\nimport { WASM_AVAILABLE, utf8EncodeWasm, WASM_STR_THRESHOLD } from \"./wasmFunctions\";\n\nexport const DEFAULT_MAX_DEPTH = 100;\nexport const DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nexport class Encoder {\n  private pos = 0;\n  private view = new DataView(new ArrayBuffer(this.initialBufferSize));\n  private bytes = new Uint8Array(this.view.buffer);\n\n  constructor(\n    readonly extensionCodec = ExtensionCodec.defaultCodec,\n    readonly maxDepth = DEFAULT_MAX_DEPTH,\n    readonly initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE,\n    readonly sortKeys = false,\n    readonly forceFloat32 = false,\n  ) {}\n\n  encode(object: unknown, depth: number): void {\n    if (depth > this.maxDepth) {\n      throw new Error(`Too deep objects in depth ${depth}`);\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  }\n\n  getUint8Array(): Uint8Array {\n    return this.bytes.subarray(0, this.pos);\n  }\n\n  ensureBufferSizeToWrite(sizeToWrite: number) {\n    const requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  }\n\n  resizeBuffer(newSize: number) {\n    const newBuffer = new ArrayBuffer(newSize);\n    const newBytes = new Uint8Array(newBuffer);\n    const newView = new DataView(newBuffer);\n\n    newBytes.set(this.bytes);\n\n    this.view = newView;\n    this.bytes = newBytes;\n  }\n\n  encodeNil() {\n    this.writeU8(0xc0);\n  }\n\n  encodeBoolean(object: boolean) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  }\n  encodeNumber(object: number) {\n    if (Number.isSafeInteger(object)) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // nagative fixint\n          this.writeU8(0xe0 | (object + 0x20));\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      // non-integer numbers\n      if (this.forceFloat32) {\n        // float 32\n        this.writeU8(0xca);\n        this.writeF32(object);\n      } else {\n        // float 64\n        this.writeU8(0xcb);\n        this.writeF64(object);\n      }\n    }\n  }\n\n  writeStringHeader(byteLength: number) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n    }\n  }\n\n  encodeString(object: string) {\n    const maxHeaderSize = 1 + 4;\n    const strLength = object.length;\n\n    if (TEXT_ENCODING_AVAILABLE && strLength > TEXT_ENCODER_THRESHOLD) {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeTE(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    } else if (WASM_AVAILABLE && strLength > WASM_STR_THRESHOLD) {\n      // ensure max possible size\n      const maxSize = maxHeaderSize + strLength * 4;\n      this.ensureBufferSizeToWrite(maxSize);\n\n      // utf8EncodeWasm() handles headByte+size as well as string itself\n      const ouputLength = utf8EncodeWasm(object, this.bytes, this.pos);\n      this.pos += ouputLength;\n      return;\n    } else {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeJs(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    }\n  }\n\n  encodeObject(object: unknown, depth: number) {\n    // try to encode objects with custom codec first of non-primitives\n    const ext = this.extensionCodec.tryToEncode(object);\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object as Record<string, unknown>, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n    }\n  }\n\n  encodeBinary(object: ArrayBufferView) {\n    const size = object.byteLength;\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large binary: ${size}`);\n    }\n    const bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  }\n\n  encodeArray(object: Array<unknown>, depth: number) {\n    const size = object.length;\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large array: ${size}`);\n    }\n    for (const item of object) {\n      this.encode(item, depth + 1);\n    }\n  }\n\n  encodeMap(object: Record<string, unknown>, depth: number) {\n    const keys = Object.keys(object);\n    if (this.sortKeys) {\n      keys.sort();\n    }\n    const size = keys.length;\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large map object: ${size}`);\n    }\n\n    for (let i = 0; i < size; i++) {\n      const key = keys[i];\n      this.encodeString(key);\n      this.encode(object[key], depth + 1);\n    }\n  }\n\n  encodeExtension(ext: ExtData) {\n    const size = ext.data.length;\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large extension object: ${size}`);\n    }\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  }\n\n  writeU8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  }\n\n  writeU8a(values: ArrayLike<number>) {\n    const size = values.length;\n    this.ensureBufferSizeToWrite(size);\n\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  }\n\n  writeI8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  }\n\n  writeU16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  }\n\n  writeI16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  }\n\n  writeU32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  }\n\n  writeI32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  }\n\n  writeF32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  }\n\n  writeF64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  }\n\n  writeU64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  writeI64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n}\n","import { ExtensionCodecType } from \"./ExtensionCodec\";\nimport { Encoder } from \"./Encoder\";\n\nexport type EncodeOptions = Partial<\n  Readonly<{\n    extensionCodec: ExtensionCodecType;\n    maxDepth: number;\n    initialBufferSize: number;\n    sortKeys: boolean;\n\n    /**\n     * If `true`, non-integer numbers are encoded in float32, not in float64 (the default).\n     *\n     * Only use it if precisions don't matter.\n     */\n    forceFloat32: boolean;\n  }>\n>;\n\nconst defaultEncodeOptions = {};\n\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */\nexport function encode(value: unknown, options: EncodeOptions = defaultEncodeOptions): Uint8Array {\n  const encoder = new Encoder(\n    options.extensionCodec,\n    options.maxDepth,\n    options.initialBufferSize,\n    options.sortKeys,\n    options.forceFloat32,\n  );\n  encoder.encode(value, 1);\n  return encoder.getUint8Array();\n}\n","export function prettyByte(byte: number): string {\n  return `${byte < 0 ? \"-\" : \"\"}0x${Math.abs(byte)\n    .toString(16)\n    .padStart(2, \"0\")}`;\n}\n","import { prettyByte } from \"./utils/prettyByte\";\nimport { ExtensionCodec } from \"./ExtensionCodec\";\nimport { getInt64, getUint64 } from \"./utils/int\";\nimport { utf8DecodeJs, TEXT_ENCODING_AVAILABLE, TEXT_DECODER_THRESHOLD, utf8DecodeTD } from \"./utils/utf8\";\nimport { createDataView, ensureUint8Array } from \"./utils/typedArrays\";\nimport { WASM_AVAILABLE, WASM_STR_THRESHOLD, utf8DecodeWasm } from \"./wasmFunctions\";\n\nenum State {\n  ARRAY,\n  MAP_KEY,\n  MAP_VALUE,\n}\n\ntype StackMapState = {\n  type: State.MAP_KEY | State.MAP_VALUE;\n  size: number;\n  key: string | null;\n  readCount: number;\n  map: Record<string, unknown>;\n};\n\ntype StackArrayState = {\n  type: State.ARRAY;\n  size: number;\n  array: Array<unknown>;\n  position: number;\n};\n\ntype StackState = StackArrayState | StackMapState;\n\nconst HEAD_BYTE_REQUIRED = -1;\n\nconst EMPTY_VIEW = new DataView(new ArrayBuffer(0));\nconst EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\n\n// IE11: Hack to support IE11.\n// IE11: Drop this hack and just use RangeError when IE11 is obsolete.\nexport const DataViewIndexOutOfBoundsError: typeof Error = (() => {\n  try {\n    // IE11: The spec says it should throw RangeError,\n    // IE11: but in IE11 it throws TypeError.\n    EMPTY_VIEW.getInt8(0);\n  } catch (e) {\n    return e.constructor;\n  }\n  throw new Error(\"never reached\");\n})();\n\nconst MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\n\nconst DEFAULT_MAX_LENGTH = 0xffff_ffff; // uint32_max\n\nexport class Decoder {\n  totalPos = 0;\n  pos = 0;\n\n  view = EMPTY_VIEW;\n  bytes = EMPTY_BYTES;\n  headByte = HEAD_BYTE_REQUIRED;\n  readonly stack: Array<StackState> = [];\n\n  constructor(\n    readonly extensionCodec = ExtensionCodec.defaultCodec,\n    readonly maxStrLength = DEFAULT_MAX_LENGTH,\n    readonly maxBinLength = DEFAULT_MAX_LENGTH,\n    readonly maxArrayLength = DEFAULT_MAX_LENGTH,\n    readonly maxMapLength = DEFAULT_MAX_LENGTH,\n    readonly maxExtLength = DEFAULT_MAX_LENGTH,\n  ) {}\n\n  setBuffer(buffer: ArrayLike<number> | ArrayBuffer): void {\n    this.bytes = ensureUint8Array(buffer);\n    this.view = createDataView(this.bytes);\n    this.pos = 0;\n  }\n\n  appendBuffer(buffer: ArrayLike<number>) {\n    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining()) {\n      this.setBuffer(buffer);\n    } else {\n      // retried because data is insufficient\n      const remainingData = this.bytes.subarray(this.pos);\n      const newData = ensureUint8Array(buffer);\n      const concated = new Uint8Array(remainingData.length + newData.length);\n      concated.set(remainingData);\n      concated.set(newData, remainingData.length);\n      this.setBuffer(concated);\n    }\n  }\n\n  hasRemaining(size = 1) {\n    return this.view.byteLength - this.pos >= size;\n  }\n\n  createNoExtraBytesError(posToShow: number) {\n    const { view, pos } = this;\n    return new RangeError(`Extra ${view.byteLength - pos} byte(s) found at buffer[${posToShow}]`);\n  }\n\n  decodeOneSync(): unknown {\n    const object = this.decodeSync();\n    if (this.hasRemaining()) {\n      throw this.createNoExtraBytesError(this.pos);\n    }\n    return object;\n  }\n\n  async decodeOneAsync(stream: AsyncIterable<ArrayLike<number>>): Promise<unknown> {\n    let decoded = false;\n    let object: unknown;\n    for await (const buffer of stream) {\n      if (decoded) {\n        throw this.createNoExtraBytesError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      try {\n        object = this.decodeSync();\n        decoded = true;\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n\n    if (decoded) {\n      if (this.hasRemaining()) {\n        throw this.createNoExtraBytesError(this.totalPos);\n      }\n      return object;\n    }\n\n    const { headByte, pos, totalPos } = this;\n    throw new RangeError(\n      `Insufficient data in parcing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`,\n    );\n  }\n\n  async *decodeStream(stream: AsyncIterable<ArrayLike<number>>) {\n    for await (const buffer of stream) {\n      this.appendBuffer(buffer);\n\n      try {\n        while (true) {\n          const result = this.decodeSync();\n\n          yield result;\n        }\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n    }\n  }\n\n  async *decodeArrayStream(stream: AsyncIterable<ArrayLike<number>>) {\n    let headerParsed = false;\n    let decoded = false;\n    let itemsLeft = 0;\n\n    for await (const buffer of stream) {\n      if (decoded) {\n        throw this.createNoExtraBytesError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      if (!headerParsed) {\n        itemsLeft = this.readArraySize();\n        headerParsed = true;\n        this.complete();\n      }\n\n      try {\n        while (true) {\n          const result = this.decodeSync();\n\n          yield result;\n\n          itemsLeft--;\n\n          if (itemsLeft === 0) {\n            decoded = true;\n            break;\n          }\n        }\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n  }\n\n  decodeSync(): unknown {\n    DECODE: while (true) {\n      const headByte = this.readHeadByte();\n      let object: unknown;\n\n      if (headByte >= 0xe0) {\n        // negative fixint (111x xxxx) 0xe0 - 0xff\n        object = headByte - 0x100;\n      } else if (headByte < 0xc0) {\n        if (headByte < 0x80) {\n          // positive fixint (0xxx xxxx) 0x00 - 0x7f\n          object = headByte;\n        } else if (headByte < 0x90) {\n          // fixmap (1000 xxxx) 0x80 - 0x8f\n          const size = headByte - 0x80;\n          if (size !== 0) {\n            this.pushMapState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = {};\n          }\n        } else if (headByte < 0xa0) {\n          // fixarray (1001 xxxx) 0x90 - 0x9f\n          const size = headByte - 0x90;\n          if (size !== 0) {\n            this.pushArrayState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = [];\n          }\n        } else {\n          // fixstr (101x xxxx) 0xa0 - 0xbf\n          const byteLength = headByte - 0xa0;\n          object = this.decodeUtf8String(byteLength, 0);\n        }\n      } else if (headByte === 0xc0) {\n        // nil\n        object = null;\n      } else if (headByte === 0xc2) {\n        // false\n        object = false;\n      } else if (headByte === 0xc3) {\n        // true\n        object = true;\n      } else if (headByte === 0xca) {\n        // float 32\n        object = this.readF32();\n      } else if (headByte === 0xcb) {\n        // float 64\n        object = this.readF64();\n      } else if (headByte === 0xcc) {\n        // uint 8\n        object = this.readU8();\n      } else if (headByte === 0xcd) {\n        // uint 16\n        object = this.readU16();\n      } else if (headByte === 0xce) {\n        // uint 32\n        object = this.readU32();\n      } else if (headByte === 0xcf) {\n        // uint 64\n        object = this.readU64();\n      } else if (headByte === 0xd0) {\n        // int 8\n        object = this.readI8();\n      } else if (headByte === 0xd1) {\n        // int 16\n        object = this.readI16();\n      } else if (headByte === 0xd2) {\n        // int 32\n        object = this.readI32();\n      } else if (headByte === 0xd3) {\n        // int 64\n        object = this.readI64();\n      } else if (headByte === 0xd9) {\n        // str 8\n        const byteLength = this.lookU8();\n        object = this.decodeUtf8String(byteLength, 1);\n      } else if (headByte === 0xda) {\n        // str 16\n        const byteLength = this.lookU16();\n        object = this.decodeUtf8String(byteLength, 2);\n      } else if (headByte === 0xdb) {\n        // str 32\n        const byteLength = this.lookU32();\n        object = this.decodeUtf8String(byteLength, 4);\n      } else if (headByte === 0xdc) {\n        // array 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xdd) {\n        // array 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xde) {\n        // map 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xdf) {\n        // map 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xc4) {\n        // bin 8\n        const size = this.lookU8();\n        object = this.decodeBinary(size, 1);\n      } else if (headByte === 0xc5) {\n        // bin 16\n        const size = this.lookU16();\n        object = this.decodeBinary(size, 2);\n      } else if (headByte === 0xc6) {\n        // bin 32\n        const size = this.lookU32();\n        object = this.decodeBinary(size, 4);\n      } else if (headByte === 0xd4) {\n        // fixext 1\n        object = this.decodeExtension(1, 0);\n      } else if (headByte === 0xd5) {\n        // fixext 2\n        object = this.decodeExtension(2, 0);\n      } else if (headByte === 0xd6) {\n        // fixext 4\n        object = this.decodeExtension(4, 0);\n      } else if (headByte === 0xd7) {\n        // fixext 8\n        object = this.decodeExtension(8, 0);\n      } else if (headByte === 0xd8) {\n        // fixext 16\n        object = this.decodeExtension(16, 0);\n      } else if (headByte === 0xc7) {\n        // ext 8\n        const size = this.lookU8();\n        object = this.decodeExtension(size, 1);\n      } else if (headByte === 0xc8) {\n        // ext 16\n        const size = this.lookU16();\n        object = this.decodeExtension(size, 2);\n      } else if (headByte === 0xc9) {\n        // ext 32\n        const size = this.lookU32();\n        object = this.decodeExtension(size, 4);\n      } else {\n        throw new Error(`Unrecognized type byte: ${prettyByte(headByte)}`);\n      }\n\n      this.complete();\n\n      const stack = this.stack;\n      while (stack.length > 0) {\n        // arrays and maps\n        const state = stack[stack.length - 1];\n        if (state.type === State.ARRAY) {\n          state.array[state.position] = object;\n          state.position++;\n          if (state.position === state.size) {\n            stack.pop();\n            object = state.array;\n          } else {\n            continue DECODE;\n          }\n        } else if (state.type === State.MAP_KEY) {\n          if (typeof object !== \"string\") {\n            throw new Error(\"The type of key must be string but \" + typeof object);\n          }\n          state.key = object;\n          state.type = State.MAP_VALUE;\n          continue DECODE;\n        } else if (state.type === State.MAP_VALUE) {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          state.map[state.key!] = object;\n          state.readCount++;\n\n          if (state.readCount === state.size) {\n            stack.pop();\n            object = state.map;\n          } else {\n            state.key = null;\n            state.type = State.MAP_KEY;\n            continue DECODE;\n          }\n        }\n      }\n\n      return object;\n    }\n  }\n\n  readHeadByte(): number {\n    if (this.headByte === HEAD_BYTE_REQUIRED) {\n      this.headByte = this.readU8();\n      // console.log(\"headByte\", prettyByte(this.headByte));\n    }\n\n    return this.headByte;\n  }\n\n  complete(): void {\n    this.headByte = HEAD_BYTE_REQUIRED;\n  }\n\n  readArraySize(): number {\n    const headByte = this.readHeadByte();\n\n    switch (headByte) {\n      case 0xdc:\n        return this.readU16();\n      case 0xdd:\n        return this.readU32();\n      default: {\n        if (headByte < 0xa0) {\n          return headByte - 0x90;\n        } else {\n          throw new Error(`Unrecognized array type byte: ${prettyByte(headByte)}`);\n        }\n      }\n    }\n  }\n\n  pushMapState(size: number) {\n    if (size > this.maxMapLength) {\n      throw new Error(`Max length exceeded: map length (${size}) > maxMapLengthLength (${this.maxMapLength})`);\n    }\n\n    this.stack.push({\n      type: State.MAP_KEY,\n      size,\n      key: null,\n      readCount: 0,\n      map: {},\n    });\n  }\n\n  pushArrayState(size: number) {\n    if (size > this.maxArrayLength) {\n      throw new Error(`Max length exceeded: array length (${size}) > maxArrayLength (${this.maxArrayLength})`);\n    }\n\n    this.stack.push({\n      type: State.ARRAY,\n      size,\n      array: new Array<unknown>(size),\n      position: 0,\n    });\n  }\n\n  decodeUtf8String(byteLength: number, headerOffset: number): string {\n    if (byteLength > this.maxStrLength) {\n      throw new Error(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);\n    }\n\n    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headerOffset;\n    let object: string;\n    if (TEXT_ENCODING_AVAILABLE && byteLength > TEXT_DECODER_THRESHOLD) {\n      object = utf8DecodeTD(this.bytes, offset, byteLength);\n    } else if (WASM_AVAILABLE && byteLength > WASM_STR_THRESHOLD) {\n      object = utf8DecodeWasm(this.bytes, offset, byteLength);\n    } else {\n      object = utf8DecodeJs(this.bytes, offset, byteLength);\n    }\n    this.pos += headerOffset + byteLength;\n    return object;\n  }\n\n  decodeBinary(byteLength: number, headOffset: number): Uint8Array {\n    if (byteLength > this.maxBinLength) {\n      throw new Error(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);\n    }\n\n    if (!this.hasRemaining(byteLength + headOffset)) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headOffset;\n    const object = this.bytes.subarray(offset, offset + byteLength);\n    this.pos += headOffset + byteLength;\n    return object;\n  }\n\n  decodeExtension(size: number, headOffset: number): unknown {\n    if (size > this.maxExtLength) {\n      throw new Error(`Max length exceeded: ext length (${size}) > maxExtLength (${this.maxExtLength})`);\n    }\n\n    const extType = this.view.getInt8(this.pos + headOffset);\n    const data = this.decodeBinary(size, headOffset + 1 /* extType */);\n    return this.extensionCodec.decode(data, extType);\n  }\n\n  lookU8() {\n    return this.view.getUint8(this.pos);\n  }\n\n  lookU16() {\n    return this.view.getUint16(this.pos);\n  }\n\n  lookU32() {\n    return this.view.getUint32(this.pos);\n  }\n\n  readU8(): number {\n    const value = this.view.getUint8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  readI8(): number {\n    const value = this.view.getInt8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  readU16(): number {\n    const value = this.view.getUint16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  readI16(): number {\n    const value = this.view.getInt16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  readU32(): number {\n    const value = this.view.getUint32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  readI32(): number {\n    const value = this.view.getInt32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  readU64(): number {\n    const value = getUint64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  readI64(): number {\n    const value = getInt64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  readF32() {\n    const value = this.view.getFloat32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  readF64() {\n    const value = this.view.getFloat64(this.pos);\n    this.pos += 8;\n    return value;\n  }\n}\n","import { ExtensionCodecType } from \"./ExtensionCodec\";\nimport { Decoder } from \"./Decoder\";\n\nexport type DecodeOptions = Partial<\n  Readonly<{\n    extensionCodec: ExtensionCodecType;\n\n    /**\n     * Maximum string length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxStrLength: number;\n    /**\n     * Maximum binary length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxBinLength: number;\n    /**\n     * Maximum array length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxArrayLength: number;\n    /**\n     * Maximum map length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxMapLength: number;\n    /**\n     * Maximum extension length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxExtLength: number;\n  }>\n>;\n\nexport const defaultDecodeOptions: DecodeOptions = {};\n\n/**\n * It decodes a MessagePack-encoded buffer.\n *\n * This is a synchronous decoding function. See other variants for asynchronous decoding: `decodeAsync()`, `decodeStream()`, `decodeArrayStream()`.\n */\nexport function decode(\n  buffer: ArrayLike<number> | ArrayBuffer,\n  options: DecodeOptions = defaultDecodeOptions,\n): unknown {\n  const decoder = new Decoder(\n    options.extensionCodec,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  decoder.setBuffer(buffer); // decodeSync() requires only one buffer\n  return decoder.decodeOneSync();\n}\n","// utility for whatwg streams\n\n// The living standard of whatwg streams says\n// ReadableStream is also AsyncIterable, but\n// as of June 2019, no browser implements it.\n// See https://streams.spec.whatwg.org/ for details\nexport type ReadableStreamLike<T> = AsyncIterable<T> | ReadableStream<T>;\n\nexport function isAsyncIterable<T>(object: object): object is AsyncIterable<T> {\n  return (object as any)[Symbol.asyncIterator] != null;\n}\n\nexport async function* asyncIterableFromStream<T>(stream: ReadableStream<T>): AsyncIterable<T> {\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function ensureAsyncIterabe<T>(streamLike: ReadableStreamLike<T>): AsyncIterable<T> {\n  if (isAsyncIterable(streamLike)) {\n    return streamLike;\n  } else {\n    return asyncIterableFromStream(streamLike);\n  }\n}\n","import { Decoder } from \"./Decoder\";\nimport { defaultDecodeOptions, DecodeOptions } from \"./decode\";\nimport { ensureAsyncIterabe, ReadableStreamLike } from \"./utils/stream\";\n\nexport type DecodeAsyncOptions = DecodeOptions;\nexport const defaultDecodeAsyncOptions = defaultDecodeOptions;\n\nexport async function decodeAsync(\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\n  options: DecodeAsyncOptions = defaultDecodeOptions,\n): Promise<unknown> {\n  const stream = ensureAsyncIterabe(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decodeOneAsync(stream);\n}\n\nexport function decodeArrayStream(\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\n  options: DecodeAsyncOptions = defaultDecodeOptions,\n) {\n  const stream = ensureAsyncIterabe(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeArrayStream(stream);\n}\n\nexport function decodeStream(\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\n  options: DecodeAsyncOptions = defaultDecodeOptions,\n) {\n  const stream = ensureAsyncIterabe(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeStream(stream);\n}\n","// Main Functions:\n\nexport { encode } from \"./encode\";\nexport { decode } from \"./decode\";\nexport { decodeAsync, decodeArrayStream, decodeStream } from \"./decodeAsync\";\n\nexport { Decoder } from \"./Decoder\";\nexport { Encoder } from \"./Encoder\";\n\n// Utilitiies for Extension Types:\n\nexport { ExtensionCodec, ExtensionCodecType, ExtensionDecoderType, ExtensionEncoderType } from \"./ExtensionCodec\";\nexport { ExtData } from \"./ExtData\";\nexport {\n  EXT_TIMESTAMP,\n  encodeDateToTimeSpec,\n  encodeTimeSpecToTimestamp,\n  decodeTimestampToTimeSpec,\n  encodeTimestampExtension,\n  decodeTimestampExtension,\n} from \"./timestamp\";\n\nexport { WASM_AVAILABLE as __WASM_AVAILABLE } from \"./wasmFunctions\";\n"],"sourceRoot":""}
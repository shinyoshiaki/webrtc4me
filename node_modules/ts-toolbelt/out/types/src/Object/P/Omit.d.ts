import { Length } from '../../Tuple/Length';
import { Compute } from '../../Any/Compute';
import { IterationOf } from '../../Iteration/IterationOf';
import { Iteration } from '../../Iteration/Iteration';
import { Pos } from '../../Iteration/Pos';
import { Next } from '../../Iteration/Next';
import { Filter } from '../Filter';
import { Path as PPath } from './_Internal';
import { Index } from '../../_Internal';
import { Type } from '../../Any/Type';
declare type Never = Type<{}, 'never'>;
declare type _Omit<O extends object, Path extends Index[], I extends Iteration = IterationOf<'0'>> = {
    [K in keyof O]: Compute<K extends Path[Pos<I>] ? Pos<Next<I>> extends Length<Path> ? Never : _Omit<O[K] & {}, Path, Next<I>> : O[K]>;
} extends infer X ? Filter<X & {}, Never, '<-extends'> : never;
/** Remove out of **`O`** the fields at **`Path`**
 * @param O to remove from
 * @param Path to be followed
 * @returns **`object`**
 * @example
 * ```ts
 * ```
 */
export declare type Omit<O extends object, Path extends PPath> = _Omit<O, Path>;
export {};

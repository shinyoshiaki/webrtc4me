import { Merge } from './Merge';
import { Pick } from './Pick';
import { Depth } from './_Internal';
import { Index } from '../_Internal';
import { Keys } from './Keys';
import { Implements } from '../Any/Implements';
declare type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
};
declare type OptionalDeep<O> = {
    [K in keyof O]?: OptionalDeep<O[K]>;
};
declare type OptionalPart<O extends object, depth extends Depth> = {
    'flat': OptionalFlat<O>;
    'deep': OptionalDeep<O>;
}[depth];
/** Make some fields of **`O`** optional (deeply or not)
 * @param O to make optional
 * @param K to choose fields (?=`keyof O`)
 * @param depth to do it deeply (?=`'default'`)
 * @returns **`object`**
 * @example
 * ```ts
 * ```
 */
export declare type Optional<O extends object, K extends Index = keyof O, depth extends Depth = 'flat'> = {
    1: OptionalPart<O, depth>;
    0: Merge<OptionalPart<Pick<O, K>, depth>, O>;
}[Implements<Keys<O>, K>];
export {};

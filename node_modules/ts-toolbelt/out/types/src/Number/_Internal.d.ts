import { IterationMap } from '../Iteration/IterationOf';
import { Exclude } from '../Union/Exclude';
import { SelectKeys } from '../Object/SelectKeys';
import { Format } from '../Iteration/Format';
/** Describes compatible type formats
 * * `b`: **`boolean`**
 * * `n`: **`number`**
 * * `s`: **`string`**
 */
export declare type Formats = 'b' | 'n' | 's';
declare type KnownIterationMapKeys = Exclude<keyof IterationMap, '__'>;
declare type PositiveIterationKeys = SelectKeys<IterationMap, [any, any, any, any, '+']>;
declare type NegativeIterationKeys = SelectKeys<IterationMap, [any, any, any, any, '-']>;
/** Describes known values of a **number**
 */
export declare type Numbers = {
    'string': {
        'all': Format<IterationMap[KnownIterationMapKeys], 's'>;
        '+': Format<IterationMap[PositiveIterationKeys], 's'>;
        '-': Format<IterationMap[NegativeIterationKeys], 's'>;
        '0': Format<IterationMap['0'], 's'>;
    };
    'number': {
        'all': Format<IterationMap[KnownIterationMapKeys], 'n'>;
        '+': Format<IterationMap[PositiveIterationKeys], 'n'>;
        '-': Format<IterationMap[NegativeIterationKeys], 'n'>;
        '0': Format<IterationMap['0'], 'n'>;
    };
};
export {};
